{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport useInfinite from \"@src/hooks/useInfinite\";\nimport { resetArticle, thunkUpdArticle, updArticle } from \"@src/reducers/article/actions\";\nimport { BottomBar, Banner, Header, Button, Loading, BottomLine, Article } from \"@src/components\";\nimport './style.scss';\nimport { getArticleList } from \"@src/services/article\";\nimport { useTitle } from \"@src/hooks\";\n\nconst Home = props => {\n  useTitle('首页');\n  const dispatch = useDispatch();\n  const history = useRouter();\n  const {\n    serverPageNum,\n    serverHasMore,\n    serverSucceed\n  } = props; // 获取state article信息\n\n  const {\n    articleIdList,\n    articleMap\n  } = useSelector(state => state.article);\n  const articleList = articleIdList.map(id => articleMap[id]); //定义无线加载类型\n\n  const getArticleList = useCallback(async ({\n    pageSize,\n    pageNum\n  }) => dispatch(thunkUpdArticle({\n    pageNum,\n    pageSize\n  })), [dispatch]); //封装分页详情\n\n  const {\n    load,\n    hasMore,\n    loading\n  } = useInfinite(getArticleList, {\n    pageSize: 5,\n    immediate: !serverSucceed,\n    hasMore: serverHasMore,\n    defaultPage: serverPageNum,\n    defaultLoading: !serverSucceed\n  }); // 跳转详情\n\n  const goPost = useCallback(id => {\n    // 因为post的关系所以这边直接作为query传入就可以了\n    return () => history.push({\n      pathname: '/post',\n      query: {\n        id\n      }\n    });\n  }, [history]);\n  useEffect(() => {\n    // 组件卸载完成之后清除redux里的数据\n    return () => {\n      dispatch(resetArticle());\n    };\n  }, []);\n  return __jsx(\"div\", {\n    className: \"home\"\n  }, __jsx(Header, null), __jsx(Banner, null), __jsx(\"div\", {\n    className: \"homeContent\"\n  }, articleList.map(article => __jsx(Article, _extends({\n    key: article.id\n  }, article, {\n    onClick: goPost(article.id)\n  }))), __jsx(\"div\", {\n    className: \"loadBar\"\n  }, loading ? __jsx(Loading, null, \"\\u52A0\\u8F7D\\u4E2D...\") : hasMore ? __jsx(Button, {\n    onClick: load\n  }, \"\\u52A0\\u8F7D\\u66F4\\u591A\") : __jsx(BottomLine, {\n    lineWidth: 100\n  }))), __jsx(BottomBar, null));\n};\n\nHome.getInitialProps = async context => {\n  const {\n    reduxStore\n  } = context;\n  let pageNum = 1;\n  let hasMore = true;\n  let list;\n  const {\n    data\n  } = await getArticleList({\n    pageNum,\n    pageSize: 5\n  });\n\n  if (data.totalPage <= pageNum) {\n    hasMore = false;\n  }\n\n  pageNum += 1;\n  list = data.list;\n  reduxStore.dispatch(updArticle(list));\n  return {\n    serverSucceed: true,\n    serverPageNum: pageNum,\n    serverHasMore: hasMore,\n    serverList: list\n  };\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}