{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { UPD_ARTICLE_LIST, RESET_ARTICLE_LIST } from './types';\nconst defaultState = {\n  articleIdList: [],\n  articleMap: {}\n};\nexport default function articleReducer(state = defaultState, action) {\n  switch (action.type) {\n    // 扁平化缓存文章数据\n    case UPD_ARTICLE_LIST:\n      const {\n        articleList\n      } = action.payload;\n      const articleMap = articleList.reduce((obj, cur) => {\n        obj[cur.id] = cur;\n        return obj;\n      }, {});\n      return {\n        articleIdList: [...state.articleIdList, ...articleList.map(article => article.id)],\n        articleMap: _objectSpread(_objectSpread({}, state.articleMap), articleMap)\n      };\n\n    case RESET_ARTICLE_LIST:\n      return {\n        articleIdList: [],\n        articleMap: _objectSpread({}, state.articleMap)\n      };\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}