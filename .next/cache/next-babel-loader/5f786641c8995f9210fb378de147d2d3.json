{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getTagList } from '@src/services/tag';\nimport { RESET_TAG_LIST, UPD_TAG_LIST } from './types';\n//actionCreator\nexport function updTag(tagList) {\n  return {\n    type: UPD_TAG_LIST,\n    payload: {\n      tagList: tagList\n    }\n  };\n}\nexport function resetTag() {\n  return {\n    type: RESET_TAG_LIST\n  };\n} // action\n\nexport var thunkUpdTag = function thunkUpdTag() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var _getState, _getState$tag, tagList, tagMap, _yield$getTagList, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _getState = getState(), _getState$tag = _getState.tag, tagList = _getState$tag.tagList, tagMap = _getState$tag.tagMap;\n\n              if (!(tagList && tagList.length)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.resolve(Object.values(tagMap)));\n\n            case 3:\n              _context.next = 5;\n              return getTagList();\n\n            case 5:\n              _yield$getTagList = _context.sent;\n              data = _yield$getTagList.data;\n              dispatch(updTag(data));\n              return _context.abrupt(\"return\", data);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":null,"metadata":{},"sourceType":"module"}