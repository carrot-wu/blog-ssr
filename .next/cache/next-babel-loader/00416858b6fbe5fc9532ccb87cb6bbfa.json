{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport useInfinite from \"@src/hooks/useInfinite\";\nimport { resetArticle, thunkUpdArticle, updArticle } from \"@src/reducers/article/actions\";\nimport { BottomBar, Banner, Header, Button, Loading, BottomLine, Article } from \"@src/components\";\nimport './style.scss';\nimport { getArticleList } from \"@src/services/article\";\nimport { useTitle } from \"@src/hooks\";\n\nvar Home = function Home(props) {\n  useTitle('首页');\n  var dispatch = useDispatch();\n  var history = useRouter();\n  var serverPageNum = props.serverPageNum,\n      serverHasMore = props.serverHasMore,\n      serverSucceed = props.serverSucceed; // 获取state article信息\n\n  var _useSelector = useSelector(function (state) {\n    return state.article;\n  }),\n      articleIdList = _useSelector.articleIdList,\n      articleMap = _useSelector.articleMap;\n\n  var articleList = articleIdList.map(function (id) {\n    return articleMap[id];\n  }); //定义无线加载类型\n\n  var getArticleList = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var pageSize, pageNum;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              pageSize = _ref.pageSize, pageNum = _ref.pageNum;\n              return _context.abrupt(\"return\", dispatch(thunkUpdArticle({\n                pageNum: pageNum,\n                pageSize: pageSize\n              })));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [dispatch]); //封装分页详情\n\n  var _useInfinite = useInfinite(getArticleList, {\n    pageSize: 5,\n    immediate: !serverSucceed,\n    hasMore: serverHasMore,\n    defaultPage: serverPageNum,\n    defaultLoading: !serverSucceed\n  }),\n      load = _useInfinite.load,\n      hasMore = _useInfinite.hasMore,\n      loading = _useInfinite.loading; // 跳转详情\n\n\n  var goPost = useCallback(function (id) {\n    // 因为post的关系所以这边直接作为query传入就可以了\n    return function () {\n      return history.push({\n        pathname: '/post',\n        query: {\n          id: id\n        }\n      });\n    };\n  }, [history]);\n  useEffect(function () {\n    // 组件卸载完成之后清除redux里的数据\n    return function () {\n      dispatch(resetArticle());\n    };\n  }, []);\n  return __jsx(\"div\", {\n    className: \"home\"\n  }, __jsx(Header, null), __jsx(Banner, null), __jsx(\"div\", {\n    className: \"homeContent\"\n  }, articleList.map(function (article) {\n    return __jsx(Article, _extends({\n      key: article.id\n    }, article, {\n      onClick: goPost(article.id)\n    }));\n  }), __jsx(\"div\", {\n    className: \"loadBar\"\n  }, loading ? __jsx(Loading, null, \"\\u52A0\\u8F7D\\u4E2D...\") : hasMore ? __jsx(Button, {\n    onClick: load\n  }, \"\\u52A0\\u8F7D\\u66F4\\u591A\") : __jsx(BottomLine, {\n    lineWidth: 100\n  }))), __jsx(BottomBar, null));\n};\n\nHome.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {\n    var reduxStore, pageNum, hasMore, list, _yield$getArticleList, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            reduxStore = context.reduxStore;\n            pageNum = 1;\n            hasMore = true;\n            _context2.next = 5;\n            return getArticleList({\n              pageNum: pageNum,\n              pageSize: 5\n            });\n\n          case 5:\n            _yield$getArticleList = _context2.sent;\n            data = _yield$getArticleList.data;\n\n            if (data.totalPage <= pageNum) {\n              hasMore = false;\n            }\n\n            pageNum += 1;\n            list = data.list;\n            reduxStore.dispatch(updArticle(list));\n            return _context2.abrupt(\"return\", {\n              serverSucceed: true,\n              serverPageNum: pageNum,\n              serverHasMore: hasMore,\n              serverList: list\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}