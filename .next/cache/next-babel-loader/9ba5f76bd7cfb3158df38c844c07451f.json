{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { isArray, isPlainObject } from \"@src/utils/checkType\";\n\n/**\n * 用于封装请求的自定义hooks方法\n * @param {PromiseFn<R, P>} promiseFn 传入的promise方法\n * @param {any[] | PromiseOptions} depList depList 依赖数组\n * @param {PromiseOptions} options 一些自定义的配置\n * @returns {PromiseRes<PromiseFn<R, P>, R>}\n */\nfunction usePromise(promiseFn, depList, options) {\n  //重载\n  var _options;\n\n  var _depList;\n\n  _depList = isArray(depList) ? depList : [];\n  _options = isPlainObject(depList) && !isArray(depList) ? depList : options || {};\n  var _options2 = _options,\n      _options2$defaultData = _options2.defaultData,\n      defaultData = _options2$defaultData === void 0 ? {\n    data: {}\n  } : _options2$defaultData,\n      immediate = _options2.immediate,\n      _options2$defaultLoad = _options2.defaultLoading,\n      defaultLoading = _options2$defaultLoad === void 0 ? true : _options2$defaultLoad;\n\n  var _useState = useState(defaultLoading),\n      loading = _useState[0],\n      setLoading = _useState[1]; // 这边为了繁殖默认报错 这边就直接强行类型断言就可以了\n\n\n  var _useState2 = useState(defaultData),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(null),\n      error = _useState3[0],\n      setError = _useState3[1]; // 返回出去的promise函数\n\n\n  var returnPromise = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var result,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setError(null);\n            setLoading(true);\n            _context.next = 5;\n            return promiseFn.apply(void 0, _args);\n\n          case 5:\n            result = _context.sent;\n            setData(result);\n            setLoading(false);\n            return _context.abrupt(\"return\", result);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            setLoading(false);\n            setError(_context.t0);\n            return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  })), _toConsumableArray(_depList));\n  useEffect(function () {\n    if (immediate) {\n      // @ts-ignore\n      returnPromise();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return {\n    promiseFn: returnPromise,\n    res: data,\n    loading: loading,\n    error: error\n  };\n}\n\nexport default usePromise;","map":null,"metadata":{},"sourceType":"module"}