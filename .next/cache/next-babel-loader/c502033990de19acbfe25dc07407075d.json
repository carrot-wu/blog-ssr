{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useState, useEffect, useRef } from \"react\";\nimport { isFunction } from \"@src/utils/checkType\"; // 约束传入useSetState的类型\n\n/**\n * 模拟class组件的setState方法\n * @param {ISetState<T>} initObj\n * @returns {[T, ((state: ReturnStateMethods<T>) => void)]}\n */\nexport default function useSetState(initObj) {\n  const {\n    0: state,\n    1: setState\n  } = useState(initObj); // 通过useRef缓存cb方法用于下面的useEffect进行渲染\n\n  const executeCb = useRef();\n  const mySetState = useCallback((state, cb) => {\n    let newState = state;\n    setState(prevState => {\n      executeCb.current = cb;\n\n      if (isFunction(state)) {\n        newState = state(prevState);\n      }\n\n      return _objectSpread(_objectSpread({}, prevState), newState);\n    });\n  }, []);\n  useEffect(() => {\n    const {\n      current: cb\n    } = executeCb;\n    isFunction(cb) && cb(); // eslint-disable-next-line\n  }, [executeCb.current]);\n  return [state, mySetState];\n}","map":null,"metadata":{},"sourceType":"module"}