{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useMemo } from \"react\";\nimport marked from 'marked';\nimport { useRouter } from \"next/router\";\nimport Prism from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-markup\";\nimport \"prismjs/components/prism-css\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/components/prism-docker\";\nimport \"prismjs/components/prism-less\";\nimport \"prismjs/components/prism-typescript\";\nimport \"prismjs/components/prism-nginx\";\nimport \"prismjs/components/prism-scss\";\nimport \"prismjs/components/prism-jsx\";\nimport \"prismjs/components/prism-tsx\";\nimport \"prismjs/components/prism-regex\";\nimport \"prismjs/plugins/highlight-keywords/prism-highlight-keywords\";\nimport \"prismjs/plugins/normalize-whitespace/prism-normalize-whitespace\";\nimport useFormatDate from \"@src/hooks/useFormatDate\";\nimport { Loading } from \"@src/components\";\nimport { usePromise, useTitle } from '@src/hooks/index';\nimport { getArticleById } from '@src/services/article';\nimport './styles.scss';\nmarked.setOptions({\n  highlight(code, lang) {\n    return Prism.highlight(code, Prism.languages[lang], lang);\n  }\n\n});\nexport const getServerSideProps = async context => {\n  const {\n    query\n  } = context;\n  const {\n    id\n  } = query;\n  let articleData;\n\n  if (id) {\n    articleData = await getArticleById({\n      id: id\n    });\n  }\n\n  return {\n    props: {\n      serverArticleData: articleData,\n      serverSucceed: true\n    }\n  };\n};\n\nconst Post = props => {\n  const {\n    serverArticleData,\n    serverSucceed\n  } = props;\n  const router = useRouter();\n  const id = router.query.id;\n  const {\n    promiseFn: getArticleDetail,\n    res: {\n      data\n    },\n    loading\n  } = usePromise(async id => getArticleById({\n    id\n  }), [id], {\n    defaultData: serverArticleData,\n    defaultLoading: !serverSucceed\n  });\n  const {\n    title,\n    content = '',\n    createdStamp\n  } = data;\n  const time = useFormatDate(createdStamp); // 修改标题\n\n  useTitle(title);\n  useEffect(() => {\n    if (!id) {\n      //不存在id\n      router.replace('/home');\n    } else {\n      // 如果服务端请求成功了 那么直接返回即可\n      if (serverSucceed) {\n        return;\n      }\n\n      getArticleDetail(id);\n    } // eslint-disable-next-line\n\n  }, [id]);\n  const html = useMemo(() => marked(content), [content]);\n  return __jsx(\"div\", {\n    className: \"content\"\n  }, loading ? __jsx(\"div\", {\n    className: \"post-loading\"\n  }, __jsx(Loading, {\n    size: 50\n  }, \"\\u6587\\u7AE0\\u52A0\\u8F7D\\u4E2D\")) : __jsx(\"div\", {\n    className: \"post\"\n  }, __jsx(\"div\", {\n    className: \"title\"\n  }, title), __jsx(\"div\", {\n    className: \"byline\"\n  }, __jsx(\"div\", {\n    className: \"author\"\n  }, \"carrotWu\"), __jsx(\"div\", {\n    className: \"time\"\n  }, time)), __jsx(\"div\", {\n    className: \"markdown-body\",\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  })));\n};\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}