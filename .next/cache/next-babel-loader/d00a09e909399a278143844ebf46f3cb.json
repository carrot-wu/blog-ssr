{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { isArray, isPlainObject } from \"@src/utils/checkType\";\n\n/**\n * 用于封装请求的自定义hooks方法\n * @param {PromiseFn<R, P>} promiseFn 传入的promise方法\n * @param {any[] | PromiseOptions} depList depList 依赖数组\n * @param {PromiseOptions} options 一些自定义的配置\n * @returns {PromiseRes<PromiseFn<R, P>, R>}\n */\nfunction usePromise(promiseFn, depList, options) {\n  //重载\n  let _options;\n\n  let _depList;\n\n  _depList = isArray(depList) ? depList : [];\n  _options = isPlainObject(depList) && !isArray(depList) ? depList : options || {};\n  const {\n    defaultData = {\n      data: {}\n    },\n    immediate,\n    defaultLoading = true\n  } = _options;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(defaultLoading); // 这边为了繁殖默认报错 这边就直接强行类型断言就可以了\n\n  const {\n    0: data,\n    1: setData\n  } = useState(defaultData);\n  const {\n    0: error,\n    1: setError\n  } = useState(null); // 返回出去的promise函数\n\n  const returnPromise = useCallback(async (...params) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const result = await promiseFn(...params);\n      setData(result);\n      setLoading(false);\n      return result;\n    } catch (e) {\n      setLoading(false);\n      setError(e);\n      return Promise.reject(e);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [..._depList]);\n  useEffect(() => {\n    if (immediate) {\n      // @ts-ignore\n      returnPromise();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return {\n    promiseFn: returnPromise,\n    res: data,\n    loading,\n    error\n  };\n}\n\nexport default usePromise;","map":null,"metadata":{},"sourceType":"module"}